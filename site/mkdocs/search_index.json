{
    "docs": [
        {
            "location": "/", 
            "text": "BCIT COMM 2206\n\n\nMkDocs Starter Kit", 
            "title": "Home"
        }, 
        {
            "location": "/#bcit-comm-2206", 
            "text": "", 
            "title": "BCIT COMM 2206"
        }, 
        {
            "location": "/#mkdocs-starter-kit", 
            "text": "", 
            "title": "MkDocs Starter Kit"
        }, 
        {
            "location": "/installing/", 
            "text": "Installing the MkDocs Toolset\n\n\nMkDocs is a Markdown documentation generator we\u2019ll be using in class. It requires a few tools to be installed before we get started, described next.\n\n\nFor the most part, all of these tools are cross-platform and can be used on Windows or Mac. The instructions here explain the Windows methods, but each website will have specific installation instructions for each operating system.\n\n\nPython\n\n\nMkDocs is written in Python, which is a common programming language. We won\u2019t actually do anything with Python, but MkDocs needs it to work. \n\n\nPython doesn\u2019t exist by default on Windows systems, so we have to install it ourselves.\n\n\n\n\nNote\n\n\nWe\u2019re installing the current 2.x release, not the 3.x release.\n\n\n\n\nInstall Python 2.7\n\n\n\n\nGo to the \nPython download page\n\n\n\n\nClick \nDownload Python 2.7.14\n.\n\n\nThe \n.msi\n installer file will be downloaded onto your machine.\n\n\n\n\n\n\nIn the \nCustomize Python 2.7.14 dialog\n, scroll to the bottom option and select \nAdd python.exe to Path\n.\n    A dropdown list of options appears.\n\n\n\n\n\n\n\n\nClick on \nWill Be Installed to Local Hard Drive\n.\n\n\n\n\n\n\nImportant\n\n\nThis is an easy step to miss, and mkdocs won't work if you skip it.\n\n\n\n\n\n\n\n\nContinue with the installer and click \nFinished\n when done.\n\n\n\n\nClose the installer.\n\n\n\n\nVerify Python Installation\n\n\nTo verify that Python was installed correctly and added to the system Path:\n\n\n\n\nOpen a windows command prompt\n\n\nIn Windows 10, click the magnifying glass at the left side of the menu bar\n\n\nType \ncmd\n in the search text box and press \nenter\n.\n   The windows command prompt window will open.\n\n\nType \npip\n at the  prompt and press \nenter\n.\n   The terminal window should fill up with a long list of commands and arguments. You don\u2019t need to know what these do; if you see them, it means installation was successful.\n\n\n\n\nIf you get an error message\n (similar to \u201cpip is an unknown command\u201d or \u201cpip not found on system path\u201d), then Python wasn\u2019t installed correctly. Most likely, this means that step 4 wasn\u2019t followed correctly during installation.\n\n\nIf this test fails, you won\u2019t be able to install or run MkDocs. If that happens, re-run the Python installer, choose Change (not repair or uninstall) from the installer menu, and repeat the Python \ninstallation procedure\n.\n\n\nVisual Studio Code\n\n\nVisual Studio Code is a code editor normally used for programming and development. We\u2019re going to use it as our text editor here for a couple of reasons: it\u2019s very lightweight and easy to learn, it has an integrated command terminal window for convenience, and it understands multi-file projects like the ones we\u2019re going to create using MkDocs.\n\n\nIt\u2019s worth noting, though, that the files used in MkDocs (and markdown in general) are just plain text files even though they have odd extensions like .yml and .md. You don't need an elaborate editor to write markdown -- you could just as easily do all of this work using Notepad.\n\n\nInstall Visual Studio Code\n\n\n\n\nGo to Microsoft's \nVisual Studio Code\n page.\n\n\nClick \nDownload for Windows\n (or, if you\u2019re at home on another OS, choose the appropriate alternate download)\n\n\nRun the installer.\n\n\n\n\nWhen the installer completes, start Visual Studio Code.\n\n\nThe application opens and a Welcome tab displays.\n\n\n\n\n\n\nClick \nctrl\n + \n`\n (backtick) to open a command prompt window.\n\n\n\n\n\n\nSet the Default Shell\n\n\nThe default command prompt tool (you\u2019ll sometimes see this called the \nshell\n) is \nWindows PowerShell\n; we want to use the \nWindows Command Prompt\n instead. \n\n\nTo set the default terminal shell:\n\n\n\n\n\n\nPress \nCtrl\n + \nShift\n + \nP\n to open the Visual Studio Code command palette. \n\n\n\n\n\n\nType \nshell\n in the text box, and select the option for changing the default terminal shell.\n\n\n\n\n\n\n\n\nSelect command prompt from the dropdown list.\n\n\n\n\n\n\n\n\nClose and restart Visual Studio Code.\n\n\n\n\n\n\n\n\nTip\n\n\nThe first time you open the terminal in Visual Studio Code, an alert will drop in at the top of the window that allows you to easily change the default shell. Click the \nCustomize\n button in the alert then select \nCommand Prompt\n from the dropdown list.\n\n\n\n\nSet the Visual Studio Code Theme\n\n\nThe default color scheme for Visual Studio Code shows white text on a dark background; if you\u2019d rather see black text on a white background, or an entirely different color scheme, go to \nFile\n \n \nPreferences\n \n \nColor Theme\n and choose a theme you like.\n\n\nMkDocs\n\n\nMkDocs is at the engine at the heart of this markdown-based documentation project. It converts all of your markdown files to HTML, builds the navigation, and packages up all the files for distribution. \n\n\nInstall MkDocs\n\n\n\n\nIf the command prompt isn\u2019t still open in Visual Studio Code, open it by pressing ctrl + `.\n\n\nType pip install mkdocs and press enter.\n    Pip will download and install the required dependencies.\n\n\n\n\nInstall the MkDocs Material Theme\n\n\n\n\nIn the terminal window, type pip install mkdocs-material and press enter.\n    Pip will download and install the required dependencies.", 
            "title": "Installing MkDocs"
        }, 
        {
            "location": "/installing/#installing-the-mkdocs-toolset", 
            "text": "MkDocs is a Markdown documentation generator we\u2019ll be using in class. It requires a few tools to be installed before we get started, described next.  For the most part, all of these tools are cross-platform and can be used on Windows or Mac. The instructions here explain the Windows methods, but each website will have specific installation instructions for each operating system.", 
            "title": "Installing the MkDocs Toolset"
        }, 
        {
            "location": "/installing/#python", 
            "text": "MkDocs is written in Python, which is a common programming language. We won\u2019t actually do anything with Python, but MkDocs needs it to work.   Python doesn\u2019t exist by default on Windows systems, so we have to install it ourselves.   Note  We\u2019re installing the current 2.x release, not the 3.x release.", 
            "title": "Python"
        }, 
        {
            "location": "/installing/#install-python-27", 
            "text": "Go to the  Python download page   Click  Download Python 2.7.14 .  The  .msi  installer file will be downloaded onto your machine.    In the  Customize Python 2.7.14 dialog , scroll to the bottom option and select  Add python.exe to Path .\n    A dropdown list of options appears.     Click on  Will Be Installed to Local Hard Drive .    Important  This is an easy step to miss, and mkdocs won't work if you skip it.     Continue with the installer and click  Finished  when done.   Close the installer.", 
            "title": "Install Python 2.7"
        }, 
        {
            "location": "/installing/#verify-python-installation", 
            "text": "To verify that Python was installed correctly and added to the system Path:   Open a windows command prompt  In Windows 10, click the magnifying glass at the left side of the menu bar  Type  cmd  in the search text box and press  enter .\n   The windows command prompt window will open.  Type  pip  at the  prompt and press  enter .\n   The terminal window should fill up with a long list of commands and arguments. You don\u2019t need to know what these do; if you see them, it means installation was successful.   If you get an error message  (similar to \u201cpip is an unknown command\u201d or \u201cpip not found on system path\u201d), then Python wasn\u2019t installed correctly. Most likely, this means that step 4 wasn\u2019t followed correctly during installation.  If this test fails, you won\u2019t be able to install or run MkDocs. If that happens, re-run the Python installer, choose Change (not repair or uninstall) from the installer menu, and repeat the Python  installation procedure .", 
            "title": "Verify Python Installation"
        }, 
        {
            "location": "/installing/#visual-studio-code", 
            "text": "Visual Studio Code is a code editor normally used for programming and development. We\u2019re going to use it as our text editor here for a couple of reasons: it\u2019s very lightweight and easy to learn, it has an integrated command terminal window for convenience, and it understands multi-file projects like the ones we\u2019re going to create using MkDocs.  It\u2019s worth noting, though, that the files used in MkDocs (and markdown in general) are just plain text files even though they have odd extensions like .yml and .md. You don't need an elaborate editor to write markdown -- you could just as easily do all of this work using Notepad.", 
            "title": "Visual Studio Code"
        }, 
        {
            "location": "/installing/#install-visual-studio-code", 
            "text": "Go to Microsoft's  Visual Studio Code  page.  Click  Download for Windows  (or, if you\u2019re at home on another OS, choose the appropriate alternate download)  Run the installer.   When the installer completes, start Visual Studio Code.  The application opens and a Welcome tab displays.    Click  ctrl  +  `  (backtick) to open a command prompt window.", 
            "title": "Install Visual Studio Code"
        }, 
        {
            "location": "/installing/#set-the-default-shell", 
            "text": "The default command prompt tool (you\u2019ll sometimes see this called the  shell ) is  Windows PowerShell ; we want to use the  Windows Command Prompt  instead.   To set the default terminal shell:    Press  Ctrl  +  Shift  +  P  to open the Visual Studio Code command palette.     Type  shell  in the text box, and select the option for changing the default terminal shell.     Select command prompt from the dropdown list.     Close and restart Visual Studio Code.     Tip  The first time you open the terminal in Visual Studio Code, an alert will drop in at the top of the window that allows you to easily change the default shell. Click the  Customize  button in the alert then select  Command Prompt  from the dropdown list.", 
            "title": "Set the Default Shell"
        }, 
        {
            "location": "/installing/#set-the-visual-studio-code-theme", 
            "text": "The default color scheme for Visual Studio Code shows white text on a dark background; if you\u2019d rather see black text on a white background, or an entirely different color scheme, go to  File     Preferences     Color Theme  and choose a theme you like.", 
            "title": "Set the Visual Studio Code Theme"
        }, 
        {
            "location": "/installing/#mkdocs", 
            "text": "MkDocs is at the engine at the heart of this markdown-based documentation project. It converts all of your markdown files to HTML, builds the navigation, and packages up all the files for distribution.", 
            "title": "MkDocs"
        }, 
        {
            "location": "/installing/#install-mkdocs", 
            "text": "If the command prompt isn\u2019t still open in Visual Studio Code, open it by pressing ctrl + `.  Type pip install mkdocs and press enter.\n    Pip will download and install the required dependencies.", 
            "title": "Install MkDocs"
        }, 
        {
            "location": "/installing/#install-the-mkdocs-material-theme", 
            "text": "In the terminal window, type pip install mkdocs-material and press enter.\n    Pip will download and install the required dependencies.", 
            "title": "Install the MkDocs Material Theme"
        }, 
        {
            "location": "/using/", 
            "text": "Using MkDocs\n\n\nThe official documentation for MkDocs, and the Material theme, are both extremely useful. You should certainly explore the MkDocs documentation site at least; it tells you how to do virtually everything with MkDocs.\nThe MkDocs Material theme documentation covers some of the same ground, but adds the extras that MkDocs brings to the table -- a number of extensions like notes (those are called \nadmonitions\n in MkDocs).\n\n\nAbout MkDocs\n\n\nMkDocs is a documentation generator that builds complex HTML documentation using markdown source files. Because markdown files are just text, anybody can edit them, and they require no special tools to read or modify (Notepad or Textedit will do, especially for external contributors). They're also extremely easy to manage with version control systems like git.\n\n\nMkDocs is not the only document generator that uses Markdown. We're using it in this class because it's intended for documentation (several others, like \nJekyll\n, are primarily blog engines that can be made to produce documentation). The concepts and skills you learn building documentation in MkDocs will be applicable using any markdown-based system, though.\n\n\n\n\nNote\n\n\nMkDocs is a command line tool, which means it doesn\u2019t have a GUI (graphical user interface). You\u2019ll issue commands on the command line -- don\u2019t worry if you\u2019re not familiar with it; there aren\u2019t many commands to learn, and we\u2019ll cover all of them carefully.\n\n\n\n\nWhat an MkDocs Project Looks Like\n\n\nAn MkDocs project is composed of a single configuration file called \nmkdocs.yml\n and a folder called \ndocs\n, which holds all of your documentation files. \n\n\nmkdocs.yml\n is a plain text file that describes pretty much everything about your document, including:\n\n\n\n\nThe theme, or skin, for your documentation\n\n\nAny changeable theme settings, like colors or page navigation location\n\n\nMkDocs-specific settings\n\n\nAnd most importantly, the TOC of your documentation, including titles, pages, and their structure.\n\n\n\n\nMkDocs references:\n\n\nMkDocs site and documentation:http://www.mkdocs.org/\nMarkdown cheat sheet: https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet\nMaterial Theme documentation:  http://squidfunk.github.io/mkdocs-material/\n\n\nInitialize a new project with MkDocs\nNavigate into your working directory using Windows command line commands as described above.\nType mkdocs new {working directory name} and press enter. For example, if your project will be in a folder called my-test, type mkdocs new my-test and press enter.\nIf the project directory doesn\u2019t exist already, it will be created.\nThe project will be initialized and a starter configuration file (mkdocs.yml) is created, along with a directory called docs and an example markdown file (index.md).\nOpen the New Project in Visual Studio Code\nOpen the file explorer (the top icon in the menu bar, or View \n Explorer).\nOpen the new project folder: Go to File \n Open Folder, and navigate to the folder you created above with the mkdocs new command.\n\n\nImage references:\n\n\n![\nAlt Text\n](\npath/to/image/file.png\n)", 
            "title": "Using MkDocs"
        }, 
        {
            "location": "/using/#using-mkdocs", 
            "text": "The official documentation for MkDocs, and the Material theme, are both extremely useful. You should certainly explore the MkDocs documentation site at least; it tells you how to do virtually everything with MkDocs.\nThe MkDocs Material theme documentation covers some of the same ground, but adds the extras that MkDocs brings to the table -- a number of extensions like notes (those are called  admonitions  in MkDocs).", 
            "title": "Using MkDocs"
        }, 
        {
            "location": "/using/#about-mkdocs", 
            "text": "MkDocs is a documentation generator that builds complex HTML documentation using markdown source files. Because markdown files are just text, anybody can edit them, and they require no special tools to read or modify (Notepad or Textedit will do, especially for external contributors). They're also extremely easy to manage with version control systems like git.  MkDocs is not the only document generator that uses Markdown. We're using it in this class because it's intended for documentation (several others, like  Jekyll , are primarily blog engines that can be made to produce documentation). The concepts and skills you learn building documentation in MkDocs will be applicable using any markdown-based system, though.   Note  MkDocs is a command line tool, which means it doesn\u2019t have a GUI (graphical user interface). You\u2019ll issue commands on the command line -- don\u2019t worry if you\u2019re not familiar with it; there aren\u2019t many commands to learn, and we\u2019ll cover all of them carefully.", 
            "title": "About MkDocs"
        }, 
        {
            "location": "/using/#what-an-mkdocs-project-looks-like", 
            "text": "An MkDocs project is composed of a single configuration file called  mkdocs.yml  and a folder called  docs , which holds all of your documentation files.   mkdocs.yml  is a plain text file that describes pretty much everything about your document, including:   The theme, or skin, for your documentation  Any changeable theme settings, like colors or page navigation location  MkDocs-specific settings  And most importantly, the TOC of your documentation, including titles, pages, and their structure.", 
            "title": "What an MkDocs Project Looks Like"
        }, 
        {
            "location": "/using/#mkdocs-references", 
            "text": "MkDocs site and documentation:http://www.mkdocs.org/\nMarkdown cheat sheet: https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet\nMaterial Theme documentation:  http://squidfunk.github.io/mkdocs-material/  Initialize a new project with MkDocs\nNavigate into your working directory using Windows command line commands as described above.\nType mkdocs new {working directory name} and press enter. For example, if your project will be in a folder called my-test, type mkdocs new my-test and press enter.\nIf the project directory doesn\u2019t exist already, it will be created.\nThe project will be initialized and a starter configuration file (mkdocs.yml) is created, along with a directory called docs and an example markdown file (index.md).\nOpen the New Project in Visual Studio Code\nOpen the file explorer (the top icon in the menu bar, or View   Explorer).\nOpen the new project folder: Go to File   Open Folder, and navigate to the folder you created above with the mkdocs new command.  Image references:  ![ Alt Text ]( path/to/image/file.png )", 
            "title": "MkDocs references:"
        }, 
        {
            "location": "/cmd-reference/", 
            "text": "Windows Command Line Reference\n\n\nYou'll need a minimal understanding of the Windows command line to get around using MkDocs. The command line interface can be intimidating if you've never used it, but we'll just be using it for basic tasks.\n\n\nImportantly, almost all of the things we'll do on the command line can also be done using the file explorer (or Finder in macOS), so you don't have to do much at all in the terminal if you aren't comfortable in it. The only thing you \nhave\n to be able to do is navigate to the main MkDocs project folder.\n\n\nThe terminal interface shows you your current location in the file system, followed by a greater-than symbol (\n) called the prompt. You type your commands at the prompt, and press \nEnter\n to execute them.\n\n\nFor example, if you were at the root (top) level of the C drive, the prompt would look like this:\n\n\nC: \n\n\n\n\n\n\nIf you were in your \nMy Documents\n folder on a BCIT machine, your prompt might look similar to this:\n\n\nC:\n\\U\nsers\n\\A\n0078775\n\\M\ny Documents\n\\ \n\n\n\n\n\n\nCommand Reference\n\n\nThe most important thing you'll need to do in the command terminal is navigate around the file system. \n\n\nTo change your current drive:\n\n\nType the drive letter you want to move to followed by colon, and press enter. For example, to change to the H drive, type\n\nH:\n and then press enter. The prompt will show your new drive letter.\n\n\nTo see a listing of files and folders in your current location\n \n\n\nType \ndir\n and press \nEnter\n:\n\n\n \n dir\n\n\n\n\n\nFiles will show their extension (TXT, EXE, etc). Directories will be indicated by \nDIR\n. You can confirm you're in the right place by navigating to the same location using the file explorer.\n\n\nTo move down into a new directory\n \n\n\nTo navigate from your current location into a new folder, Type \ncd\n, a space, and the destination path, then press enter. For example, to move into a directory called \nmkdocs\n:\n\n\n \ncd\n mkdocs\n\n\n\n\n\nTo move UP from your current directory into the parent directory\n\nType \ncd\n and a space followed by two periods. For example, to navigate up one level:\n\n\n \ncd\n .. \n\n\n\n\n\nTo navigate up additional levels, add more dots separated by slashes: \ncd ../..\n to move up two levels, or \ncd ../../..\n to move up three levels, and so on.\n\n\nYou can autocomplete file and folder names by typing a few letters and pressing tab.", 
            "title": "Command Line Reference"
        }, 
        {
            "location": "/cmd-reference/#windows-command-line-reference", 
            "text": "You'll need a minimal understanding of the Windows command line to get around using MkDocs. The command line interface can be intimidating if you've never used it, but we'll just be using it for basic tasks.  Importantly, almost all of the things we'll do on the command line can also be done using the file explorer (or Finder in macOS), so you don't have to do much at all in the terminal if you aren't comfortable in it. The only thing you  have  to be able to do is navigate to the main MkDocs project folder.  The terminal interface shows you your current location in the file system, followed by a greater-than symbol ( ) called the prompt. You type your commands at the prompt, and press  Enter  to execute them.  For example, if you were at the root (top) level of the C drive, the prompt would look like this:  C:    If you were in your  My Documents  folder on a BCIT machine, your prompt might look similar to this:  C: \\U sers \\A 0078775 \\M y Documents \\", 
            "title": "Windows Command Line Reference"
        }, 
        {
            "location": "/cmd-reference/#command-reference", 
            "text": "The most important thing you'll need to do in the command terminal is navigate around the file system.   To change your current drive:  Type the drive letter you want to move to followed by colon, and press enter. For example, to change to the H drive, type H:  and then press enter. The prompt will show your new drive letter.  To see a listing of files and folders in your current location    Type  dir  and press  Enter :     dir  Files will show their extension (TXT, EXE, etc). Directories will be indicated by  DIR . You can confirm you're in the right place by navigating to the same location using the file explorer.  To move down into a new directory    To navigate from your current location into a new folder, Type  cd , a space, and the destination path, then press enter. For example, to move into a directory called  mkdocs :    cd  mkdocs  To move UP from your current directory into the parent directory \nType  cd  and a space followed by two periods. For example, to navigate up one level:    cd  ..   To navigate up additional levels, add more dots separated by slashes:  cd ../..  to move up two levels, or  cd ../../..  to move up three levels, and so on.  You can autocomplete file and folder names by typing a few letters and pressing tab.", 
            "title": "Command Reference"
        }
    ]
}